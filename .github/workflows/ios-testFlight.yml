name: üçè iOS CI/CD ‚Äì TestFlight

on:
  workflow_dispatch:
  push:
    branches: [develop]
    paths:
      - 'ios/**'
      - 'Podfile'
      - 'Podfile.lock'
      - '.github/workflows/ios-testflight.yml'

jobs:
  build-and-upload-ios:
    runs-on: macos-14
    timeout-minutes: 45

    steps:
      # 1Ô∏è‚É£ Checkout
      - uses: actions/checkout@v3

      # 2Ô∏è‚É£ Importar certificado P12 al keychain temporal
      - name: üîë Importar P12
        env:
          P12_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          P12_PASS: ${{ secrets.IOS_CERT_PASSWORD }}
        run: |
          mkdir -p ~/certs
          echo "$P12_BASE64" | base64 -d > ~/certs/dist.p12

          # Crear e importar en keychain 'build'
          security create-keychain -p "" build.keychain
          security import ~/certs/dist.p12 \
            -k ~/Library/Keychains/build.keychain \
            -P "$P12_PASS" \
            -T /usr/bin/codesign

          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

      # 3Ô∏è‚É£ Decodificar y copiar tu provisioning profile
      - name: üìÑ Instalar provisioning profile
        env:
          PROFILE_BASE64: ${{ secrets.IOS_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROFILE_BASE64" | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/ZentiApp_Distribution_Profile.mobileprovision
          echo "‚îÄ‚îÄ Perfil instalado:"
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles

      # 4Ô∏è‚É£ Instalaci√≥n de dependencias
      - uses: actions/setup-node@v3
        with: { node-version: '20.18.1' }
      - run: yarn install --frozen-lockfile
      - name: Install CocoaPods
        run: |
          cd ios
          pod install --repo-update
          cd ..

      # 5Ô∏è‚É£ Versionado (opcional)
      - name: Bump version & build number
        run: |
          cd ios
          xcrun agvtool new-marketing-version 1.0.1
          xcrun agvtool new-version -all ${{ github.run_number }}
          cd ..

      # 6Ô∏è‚É£ Archive + Export con Manual Signing
      - name: üèóÔ∏è Archive & Export IPA
        env:
          TEAM_ID: ${{ secrets.APPLE_DEVELOPMENT_TEAM_ID }}
        run: |
          cd ios

          # Clean + Archive (Manual signing)
          xcodebuild clean archive \
            -workspace Zenti.xcworkspace \
            -scheme Zenti \
            -archivePath build/Zenti.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PROVISIONING_PROFILE_SPECIFIER="ZentiApp_Distribution_Profile" \
            CODE_SIGN_IDENTITY="Apple Distribution"

          # ExportOptions
          cat > ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
           "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>$TEAM_ID</string>
            <key>uploadSymbols</key><true/>
            <key>uploadBitcode</key><false/>
          </dict>
          </plist>
          EOF

          # Exportar IPA
          xcodebuild -exportArchive \
            -archivePath build/Zenti.xcarchive \
            -exportPath  build \
            -exportOptionsPlist ExportOptions.plist

          cd ..

      # 7Ô∏è‚É£ Mostrar log si falla
      - name: üîç Mostrar Gym log si falla
        if: failure()
        run: cat /Users/runner/Library/Logs/gym/Zenti-Zenti.log || echo "‚ö†Ô∏è Log no encontrado"

      # 8Ô∏è‚É£ Verificar IPA
      - name: Verificar IPA generado
        run: |
          ls -lh ios/build
          test -f ios/build/Zenti.ipa || (echo "‚ùå IPA no encontrado" && exit 1)

      # 9Ô∏è‚É£ Subir a TestFlight
      - name: üöÄ Upload to TestFlight
        env:
          APPLE_ID: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file ios/build/Zenti.ipa \
            --username "$APPLE_ID" \
            --password "$APP_SPECIFIC_PASSWORD" \
            --output-format xml
