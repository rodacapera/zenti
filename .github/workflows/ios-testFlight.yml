name: üçè iOS CI/CD - TestFlight (Manual Signing Definitivo)

on:
  workflow_dispatch:
  push:
    branches-ignore: ['*']

jobs:
  build-and-upload-ios:
    if: github.ref == 'refs/heads/develop'
    runs-on: macos-14
    timeout-minutes: 45

    steps:
      - name: üì• Checkout del c√≥digo
        uses: actions/checkout@v3

      - name: üîß Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.1'

      - name: üì¶ Instalar dependencias
        run: yarn install --frozen-lockfile

      - name: üßπ Instalar pods
        run: |
          cd ios
          pod install

      - name: üîê Importar certificado y perfil
        env:
          IOS_CERT_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERT_PASS: ${{ secrets.IOS_CERT_PASSWORD }}
          IOS_PROFILE_BASE64: ${{ secrets.IOS_PROFILE_BASE64 }}
        run: |
          mkdir -p ~/certs
          echo "$IOS_CERT_BASE64" | base64 --decode > ~/certs/cert.p12
          echo "$IOS_PROFILE_BASE64"   | base64 --decode > ~/certs/profile.mobileprovision

          # keychain
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import ~/certs/cert.p12 -k build.keychain -P "$IOS_CERT_PASS" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

          # provisioning
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ~/certs/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: üè∑Ô∏è Bump versi√≥n y build number
        run: |
          cd ios
          xcrun agvtool new-marketing-version 1.0.1
          xcrun agvtool new-version -all ${{ github.run_number }}

      - name: üîç Extraer UUID del provisioning profile
        id: profile_uuid
        run: |
          UUID=$(security cms -D -i ~/certs/profile.mobileprovision \
            | plutil -extract UUID xml1 -o - - \
            | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
          echo "PROFILE_UUID=$UUID" >> $GITHUB_OUTPUT

      - name: üèóÔ∏è Compilar App iOS (.xcarchive)
        run: |
          cd ios
          xcodebuild clean archive \
            -workspace Zenti.xcworkspace \
            -scheme Zenti \
            -archivePath build/Zenti.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=${{ secrets.APPLE_DEVELOPMENT_TEAM_ID }} \
            PROVISIONING_PROFILE="$PROFILE_UUID" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            -allowProvisioningUpdates

      - name: üì¶ Exportar IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/Zenti.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates

      - name: üîç Buscar y validar IPA
        id: find_ipa
        run: |
          IPA=$(find ios/build -type f -name "*.ipa" | head -n1)
          [ -n "$IPA" ] || { echo "‚ùå IPA no encontrada"; exit 1; }
          echo "IPA_PATH=$IPA" >> $GITHUB_OUTPUT

      - name: üöÄ Subir a TestFlight con Fastlane
        env:
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          gem install fastlane
          fastlane pilot upload \
            --username "${{ secrets.APP_STORE_CONNECT_USERNAME }}" \
            --app_identifier "com.teranov.zentiapp" \
            --ipa "${{ steps.find_ipa.outputs.IPA_PATH }}" \
            --skip_waiting_for_build_processing true \
            --skip_submission true
