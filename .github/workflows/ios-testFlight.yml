name: üçè iOS CI/CD - TestFlight (Manual & Validaciones)

on:
  workflow_dispatch:
  push:
    branches:
      - develop
    paths:
      - 'ios/**'
      - 'Podfile'
      - 'Podfile.lock'
      - '.github/workflows/ios-testflight.yml'

jobs:
  build-and-upload-ios:
    runs-on: macos-14
    timeout-minutes: 45

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      # 1Ô∏è‚É£ Validar secretos + preparar keychain y provisioning
      - name: üîê Importar P12 y mobileprovision
        env:
          P12_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          PROFILE_BASE64: ${{ secrets.IOS_PROFILE_BASE64 }}
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_DEVELOPMENT_TEAM_ID }}
        run: |
          set -e
          mkdir -p ios/certs
          echo "$P12_BASE64"    | base64 -d > ios/certs/cert.p12
          echo "$PROFILE_BASE64"| base64 -d > ios/certs/profile.mobileprovision

          # importar certificado
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import ios/certs/cert.p12 \
            -k ~/Library/Keychains/build.keychain \
            -P "$IOS_CERT_PASSWORD" \
            -T /usr/bin/codesign

          # instalar provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp ios/certs/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

          # validaci√≥n r√°pida
          file ios/certs/cert.p12
          file ios/certs/profile.mobileprovision
          security cms -D -i ios/certs/profile.mobileprovision \
            -o /tmp/profile.plist
          grep -q '<key>UUID</key>'      /tmp/profile.plist
          grep -q '<key>TeamIdentifier</key>' /tmp/profile.plist

      # 2Ô∏è‚É£ Validar que el scheme est√° compartido
      - name: ‚úÖ Validar Scheme Compartido
        run: |
          ls ios/Zenti.xcworkspace/xcshareddata/xcschemes
          grep -q '<Scheme name="Zenti"' ios/Zenti.xcworkspace/xcshareddata/xcschemes/*.xcscheme

      # 3Ô∏è‚É£ Dependencias y versionado
      - name: üîß Setup Node.js
        uses: actions/setup-node@v3
        with: { node-version: '20.18.1' }

      - name: üì¶ Cache & install JS deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - run: yarn install --frozen-lockfile

      - name: üíæ Cache & install CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
      - run: |
          cd ios && pod install && cd ..

      - name: üöÄ Bump version & build number
        run: |
          cd ios
          xcrun agvtool new-marketing-version 1.0.1
          xcrun agvtool new-version -all ${{ github.run_number }}
          cd ..

      # 4Ô∏è‚É£ Seleccionar Xcode (opcional)
      - name: üî® Seleccionar Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: üìã Mostrar versi√≥n de Xcode
        run: |
          xcode-select -p
          xcodebuild -version

      # 5Ô∏è‚É£ Archive + export con Signing autom√°tico
      - name: üì¶ Archive & Export IPA (Automatic Signing)
        run: |
          set -e
          cd ios

          # 5.1 Archivar
          xcodebuild clean archive \
            -workspace Zenti.xcworkspace \
            -scheme Zenti \
            -configuration Release \
            -archivePath build/Zenti.xcarchive \
            DEVELOPMENT_TEAM=$TEAM_ID \
            CODE_SIGN_STYLE=Automatic \
            -allowProvisioningUpdates

          # 5.2 Exportar IPA
          xcodebuild -exportArchive \
            -archivePath build/Zenti.xcarchive \
            -exportPath build \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates

      # 6Ô∏è‚É£ Validar que IPA exista
      - name: üîç Verificar IPA generado
        run: |
          ls -lh ios/build
          test -f ios/build/Zenti.ipa

      # 7Ô∏è‚É£ Subir a TestFlight
      - name: üöÄ Upload to TestFlight
        env:
          APPLE_ID: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          xcrun altool \
            --upload-app --type ios \
            --file ios/build/Zenti.ipa \
            --username "$APPLE_ID" \
            --password "$APP_SPECIFIC_PASSWORD" \
            --output-format xml
