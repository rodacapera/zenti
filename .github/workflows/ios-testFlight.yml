name: üçè iOS CI/CD - TestFlight (Manual & Validaciones)

on:
  workflow_dispatch:
  push:
    branches:
      - develop
    paths:
      - 'ios/**'
      - 'Podfile'
      - 'Podfile.lock'
      - '.github/workflows/ios-testflight.yml'

jobs:
  build-and-upload-ios:
    runs-on: macos-14
    timeout-minutes: 45

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v3

      # 1Ô∏è‚É£ Importar certificado de firma (firma autom√°tica)
      - name: üîê Importar certificado al keychain
        env:
          P12_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERT_PASSWORD: ${{ secrets.IOS_CERT_PASSWORD }}
        run: |
          mkdir -p ios/certs
          echo "$P12_BASE64" | base64 -d > ios/certs/cert.p12

          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import ios/certs/cert.p12 \
            -k ~/Library/Keychains/build.keychain \
            -P "$IOS_CERT_PASSWORD" \
            -T /usr/bin/codesign

      # 2Ô∏è‚É£ Validar Scheme Compartido
      - name: ‚úÖ Validar Scheme Compartido
        run: |
          echo "Schemes en workspace:"
          ls ios/Zenti.xcworkspace/xcshareddata/xcschemes
          if grep -q 'Zenti' ios/Zenti.xcworkspace/xcshareddata/xcschemes/*.xcscheme; then
            echo "‚úÖ Encontrado ‚ÄòZenti‚Äô en alguno de los schemes"
          else
            echo "‚ùå No se encontr√≥ ‚ÄòZenti‚Äô en los schemes compartidos" && exit 1
          fi

      # 3Ô∏è‚É£ Dependencias y versionado
      - name: üîß Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.1'

      - name: üì¶ Cache & install JS deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - run: yarn install --frozen-lockfile

      - name: Install CocoaPods
        run: sudo gem install cocoapods

      - name: üíæ Cache & install CocoaPods
        uses: actions/cache@v3
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}

      - name: Clean CocoaPods and DerivedData
        run: |
          echo "üßπ Cleaning Pods and DerivedData..."
          cd ios
          pod deintegrate || true
          rm -rf Pods
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -f Podfile.lock

      - name: Install Pods
        run: |
          echo "üì¶ Installing pods..."
          cd ios
          pod install

      - name: üöÄ Bump version & build number
        run: |
          cd ios
          xcrun agvtool new-marketing-version 1.0.1
          xcrun agvtool new-version -all ${{ github.run_number }}
          cd ..

      # 4Ô∏è‚É£ Seleccionar Xcode 16.2
      - name: üî® Seleccionar Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: üìã Ver versi√≥n de Xcode
        run: |
          xcode-select -p
          xcodebuild -version

      - name: üß™ Verificar configuraci√≥n de firma
        run: |
          cd ios
          xcodebuild -workspace Zenti.xcworkspace \
            -scheme Zenti \
            -configuration Release \
            -showBuildSettings | grep -E "(CODE_SIGN_STYLE|DEVELOPMENT_TEAM|CODE_SIGN_IDENTITY)"

      # ‚úÖ NUEVO: Login con App Store Connect
      - name: üîë Login con App Store Connect (firma autom√°tica)
        env:
          APPLE_ID: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          echo "üîê Login a App Store Connect..."
          xcrun altool --validate-app \
            --username "$APPLE_ID" \
            --password "$APP_SPECIFIC_PASSWORD" \
            --file ios/GoogleService-Info.plist || true

      - name: üîç Debug-> mostrar contenido de ios/
        run: |
          echo "Archivos en ios/:"
          ls -la ios

      # 5Ô∏è‚É£ Validar ExportOptions.plist
      - name: üîç Verificar que ExportOptions.plist exista
        working-directory: ios
        run: |
          echo "üìÑ Archivos disponibles:"
          ls -la
          echo "‚úÖ Verificando ExportOptions.plist..."
          test -f ExportOptions.plist || (echo "‚ùå No se encontr√≥ ExportOptions.plist" && exit 1)

      # 6Ô∏è‚É£ Archive + export con firma autom√°tica
      - name: üì¶ Archive & Export IPA
        env:
          TEAM_ID: ${{ secrets.APPLE_DEVELOPMENT_TEAM_ID }}
        run: |
          set -e
          cd ios

          xcodebuild clean archive \
          -workspace Zenti.xcworkspace \
          -scheme Zenti \
          -configuration Release \
          -archivePath build/Zenti.xcarchive \
          DEVELOPMENT_TEAM=$TEAM_ID \
          CODE_SIGN_STYLE=Automatic \
          -allowProvisioningUpdates \
          | tee xcodebuild.log | xcpretty --color

          xcodebuild -exportArchive \
            -archivePath build/Zenti.xcarchive \
            -exportPath build \
            -exportOptionsPlist ./ExportOptions.plist \
            -allowProvisioningUpdates

      # üîç Mostrar errores recientes del archivo de log
      - name: üîç Mostrar errores recientes del build
        if: failure()
        run: |
          echo "üõë Build fall√≥. Mostrando √∫ltimos errores:"
          tail -n 100 ios/xcodebuild.log

      # üíæ Guardar log de build como artefacto
      - name: üíæ Guardar log de xcodebuild
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-log
          path: ios/xcodebuild.log

      # 7Ô∏è‚É£ Verificar IPA generado
      - name: üîç Verificar IPA generado
        run: |
          ls -lh ios/build
          test -f ios/build/Zenti.ipa || (echo "‚ùå No se gener√≥ Zenti.ipa" && exit 1)

      # 8Ô∏è‚É£ Subir a TestFlight
      - name: üöÄ Upload to TestFlight
        env:
          APPLE_ID: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          xcrun altool \
            --upload-app --type ios \
            --file ios/build/Zenti.ipa \
            --username "$APPLE_ID" \
            --password "$APP_SPECIFIC_PASSWORD" \
            --output-format xml
