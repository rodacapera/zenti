name: üçè iOS CI/CD - TestFlight (Manual & Validaciones)

on:
  workflow_dispatch:
  push:
    branches: [develop]
    paths:
      - 'ios/**'
      - 'Podfile'
      - 'Podfile.lock'
      - '.github/workflows/ios-testflight.yml'

jobs:
  build-and-upload-ios:
    runs-on: macos-14
    timeout-minutes: 45

    steps:
      - uses: actions/checkout@v3

      - name: üîÑ Preparar directorio para certs
        run: mkdir -p ios/certs

      - name: üì• Decodificar y validar secretos iOS
        env:
          P12_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          PROFILE_BASE64: ${{ secrets.IOS_PROFILE_BASE64 }}
        run: |
          echo "$P12_BASE64" | base64 -d > ios/certs/cert.p12
          echo "$PROFILE_BASE64" | base64 -d > ios/certs/profile.mobileprovision
          file ios/certs/cert.p12
          file ios/certs/profile.mobileprovision
          security cms -D -i ios/certs/profile.mobileprovision \
            | grep -q '<key>UUID</key>' || (echo '‚ùå Provisioning inv√°lido' && exit 1)
          echo "‚úÖ Certificado y provisioning v√°lidos"

      - name: ‚úÖ Validar Scheme Compartido
        run: |
          ls ios/Zenti.xcworkspace/xcshareddata/xcschemes
          grep -q '<Scheme name="Zenti"' ios/Zenti.xcworkspace/xcshareddata/xcschemes/Zenti.xcscheme \
            || (echo '‚ùå Scheme ‚ÄúZenti‚Äù no est√° compartido en el workspace' && exit 1)
          echo "‚úÖ Scheme compartido OK"

      # A partir de aqu√≠ seguimos solo si las validaciones previas fueron exitosas
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.18.1'

      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/yarn
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install JS deps
        run: yarn install --frozen-lockfile

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: |
            ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}

      - name: Install pods
        run: cd ios && pod install && cd ..

      - name: Bump version & build number
        run: |
          cd ios
          xcrun agvtool new-marketing-version 1.0.1
          xcrun agvtool new-version -all ${{ github.run_number }}
          cd ..

      - name: Build & Export IPA
        uses: yukiarrr/ios-build-action@v1.12.0
        with:
          workspace-path: ios/Zenti.xcworkspace
          project-path: ios/Zenti.xcodeproj
          scheme: Zenti
          export-method: app-store
          output-path: ios/build/Zenti.ipa
          p12-base64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          mobileprovision-base64: ${{ secrets.IOS_PROFILE_BASE64 }}
          certificate-password: ${{ secrets.IOS_CERT_PASSWORD }}
          team-id: ${{ secrets.APPLE_DEVELOPMENT_TEAM_ID }}
          export-options-plist-path: ios/ExportOptions.plist
          code-signing-identity: 'Apple Distribution'
          custom-keychain-name: 'build'

      - name: üîç Mostrar log completo si falla el build
        if: failure()
        run: |
          echo "üö® Fastlane Gym Log:"
          cat /Users/runner/Library/Logs/gym/Zenti-Zenti.log || echo "‚ö†Ô∏è Log no encontrado"

      - name: Verificar que se gener√≥ el IPA
        run: |
          ls -lh ios/build
          test -f ios/build/Zenti.ipa || (echo '‚ùå IPA no fue generada' && exit 1)
          echo "‚úÖ IPA generada correctamente"

      - name: Upload to TestFlight via altool
        env:
          APPLE_ID: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          xcrun altool --upload-app --type ios \
            --file ios/build/Zenti.ipa \
            --username "$APPLE_ID" \
            --password "$APP_SPECIFIC_PASSWORD" \
            --output-format xml
