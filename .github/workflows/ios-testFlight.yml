name: üçè iOS CI/CD ‚Äì TestFlight

on:
  workflow_dispatch:
  push:
    branches: [develop]
    paths:
      - 'ios/**'
      - 'Podfile'
      - 'Podfile.lock'
      - '.github/workflows/ios-testflight.yml'

jobs:
  build-and-upload-ios:
    runs-on: macos-14
    timeout-minutes: 45

    steps:
      # 1Ô∏è‚É£ Checkout
      - uses: actions/checkout@v3

      # 2Ô∏è‚É£ Importar tu certificado P12 en un keychain temporal
      - name: üîë Importar certificado de distribuci√≥n
        env:
          P12_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          P12_PASS: ${{ secrets.IOS_CERT_PASSWORD }}
        run: |
          mkdir -p ~/certs
          echo "$P12_BASE64"  | base64 -d > ~/certs/dist.p12
          security create-keychain -p "" build.keychain
          security import ~/certs/dist.p12 \
            -k ~/Library/Keychains/build.keychain \
            -P "$P12_PASS" \
            -T /usr/bin/codesign
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain

      # 3Ô∏è‚É£ Instalar dependencias
      - uses: actions/setup-node@v3
        with: { node-version: '20.18.1' }
      - run: yarn install --frozen-lockfile
      - name: Install CocoaPods
        run: |
          cd ios
          pod install --repo-update
          cd ..

      # 4Ô∏è‚É£ Versionado (opcional)
      - name: Bump marketing version & build number
        run: |
          cd ios
          xcrun agvtool new-marketing-version 1.0.1
          xcrun agvtool new-version -all ${{ github.run_number }}
          cd ..

      # 5Ô∏è‚É£ Archive + Export con xcodebuild + Automatic Signing
      - name: üèóÔ∏è Archive & Export IPA
        env:
          DEVELOPER_TEAM: ${{ secrets.APPLE_DEVELOPMENT_TEAM_ID }}
        run: |
          cd ios

          # 5.1 Clean + Archive
          xcodebuild clean archive \
            -workspace Zenti.xcworkspace \
            -scheme Zenti \
            -archivePath build/Zenti.xcarchive \
            CODE_SIGN_STYLE=Automatic \
            DEVELOPMENT_TEAM="$DEVELOPER_TEAM" \
            -allowProvisioningUpdates

          # 5.2 Generar ExportOptions.plist din√°mico
          cat <<EOF > ExportOptions.plist
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
           "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>automatic</string>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>teamID</key><string>$DEVELOPER_TEAM</string>
          </dict>
          </plist>
          EOF

          # 5.3 Exportar .ipa
          xcodebuild -exportArchive \
            -archivePath build/Zenti.xcarchive \
            -exportPath  build \
            -exportOptionsPlist ExportOptions.plist \
            -allowProvisioningUpdates

          cd ..

      # 6Ô∏è‚É£ Si falla, ver el log de gym
      - name: üîç Dump Xcode/raw Gym log on failure
        if: failure()
        run: |
          echo "---- RAW xcodebuild log ----"
          cat /Users/runner/Library/Logs/gym/Zenti-Zenti.log || echo "Log no encontrado"

      # 7Ô∏è‚É£ Verificar IPA
      - name: Verificar IPA generado
        run: |
          ls -lh ios/build
          test -f ios/build/Zenti.ipa || (echo "‚ùå IPA no generado" && exit 1)

      # 8Ô∏è‚É£ Subir a TestFlight v√≠a altool
      - name: üöÄ Upload to TestFlight
        env:
          APPLE_ID: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
        run: |
          xcrun altool --upload-app \
            --type ios \
            --file ios/build/Zenti.ipa \
            --username "$APPLE_ID" \
            --password "$APP_SPECIFIC_PASSWORD" \
            --output-format xml
